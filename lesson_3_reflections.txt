When would you want to use a remote repository rather than keeping all your work local?

     Keeping projects local presents the problems faced with collaboration that were 
     mentioned at the beginning of this course; sharing a concurrent, multi-file project
     is unwieldy at best. Remote repositories eanble project team members to push their 
     branches to a central hub where all members can see the changes and retrieve the 
     latest file with ease. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
  
    If you are making changes to a portion of a project, having it run off the last stable build may eliminate the need to constantly
    review code that had been pushed to the master and update the cod-in-progress before one's component is finished.  
	
Describe the differences between forks, clones, and branches. Whe would you use one 
	instead of another?

	You can clone a fork, where forks are used to build upon other's work and cloning is 
	used to build on a project off a git repository. Branches operate on themselves and 
	are useful for creating new features. Cloning and forking are both useful for 
	collaboration, but cloning from a private branch may retain a secure project whereas
	forking may not be ideal for proprietary collaboration (just a WAG). In any case, 
	forking to build upon an abandoned project or a base project that will deliminate 
	from the author's original intent may be desireable as well.
	
What is the benefit of having a copy of the last known state of the remote stored locally?

	It will be easier to track down and identify bugs. Programming files on the go is also 
	a vital technique when internet connection is not present, allowing progress to be made
	while offline on any local repository.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	I have tried collaborating without GitHub and what ends up happening is one person does all the work.
	Lack of coordinating updates on files in a project between collaborators winds up isolating individuals
	and causing conflict with version control. 
	
When would you want to make changes in a separate branch rather than directly in master? What 
	benefits does each approach have?
	
	Branching from master allows for more changes to be made without the risk of impacting 
	a working version of a project. Directly updating master will allow one version to be 
	updated and tracking down bugs by comparing other versions may be easier than viewing 
	nested branches from a multi-branched project. `